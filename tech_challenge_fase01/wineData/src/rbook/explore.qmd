---
code-fold: true
editor: 
  markdown: 
    wrap: sentence
tbl-cap-location: bottom
---

```{css, echo = FALSE}
.justify {
  text-align: justify !important
}
```

# Análise exploratória 

::: {style="text-align: justify"}
<!--- begin section --->
```{r import_libs}
#| echo: false
#| message: false
#| warning: false

options(warnPartialMatchArgs = TRUE)
source('utils.R')

```

```{r, read_data_yearly}
#| echo: false
#| message: false
#| warning: false
#| cache: true
 
# Lê os dados de entrada
data_exp_y <-
    readr::read_delim(
        "../../data/EXP_VINHO_2000_2022_20231118_anual.csv",
        delim = ";",
        escape_double = FALSE,
        trim_ws = TRUE,
        show_col_types = F
    )
```


```{r, read_data_monthly}
#| echo: false
#| message: false
#| warning: false
#| cache: true
 

# Lê os dados de entrada

data_exp_m <-
    readr::read_delim(
        "../../data/EXP_VINHO_2000_2022_20231118_mensal.csv",
        delim = ";",
        escape_double = FALSE,
        trim_ws = TRUE,
        show_col_types = F
    )
```

A tabela @tbl-ts_input_yearly contém o ano, o país para o qual o vinho foi exportado, o valor exportado naquele determinado ano em US\$, e a quantidade exportada em litros (1L = 1kg).
Apesar dos dados fornecidos pela [vinícula](http://vitibrasil.cnpuv.embrapa.br/index.php?opcao=opt_01) também estarem em base anual, para fins de completude, lançamos mão dos **dados originais**, os quais foram extraídos do [Comexstat](http://comexstat.mdic.gov.br/pt/geral/97910) de responsabilidade do Ministério da Indústria, Comércio Exterior e Serviços (MDIC).

<!--- begin table --->
::: {#tbl-ts_input_yearly}
```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-ts_input_yearly
#| tbl-cap: ""

# Transformação do dataframe original para padronizar e facilitar a manipulação
# Foi criada uma coluna `date` no formato correspondente a partir das colunas `Ano` e `Mês`      
ts_tbl_y <-
    data_exp_y |> mutate(date = lubridate::make_date(Ano,12,31)) |>
    rename(value = `Valor FOB (US$)`) |>
    rename(volume = `Quilograma Líquido`) |>
    rename(country = `Países`) |>
    select(c(date, country, value, volume))  |> 
  filter(country != 'Brasil') |> filter(volume > 1) 
# existem linhas com o Brasil, o que não faz sentido; 
# também são excluídos da base países para os quais o Brasil tenha exportado menos que 1KG.L

tbl_render(ts_tbl_y,"")

```

Série dos dados anuais de volume e valor de vinho exportado pelo Brasil - 2000 a 2022.
:::
<!--- end table --->

A tabela @tbl-ts_input_monthly, por seuturno,  contém o ano, o país para o qual o vinho foi exportado, o valor exportado naquele determinado ano e mês em US$, e a quantidade exportada em litros (1L = 1kg). Convém lembrar que estes dados não foram inicialmente fornecidos e demandaram a extração diretamente do [Comexstat](http://comexstat.mdic.gov.br/pt/geral/97910).

<!--- begin table --->
::: {#tbl-ts_input_monthly}
```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-ts_input_monhtly
#| tbl-cap: ""

# Transformação do dataframe original para padronizar e facilitar a manipulação
# Foi criada uma coluna `date` no formato correspondente a partir das colunas `Ano` e `Mês`      
ts_tbl_m <-
    data_exp_m |> mutate(date = lubridate::make_date(`Ano`,`Mês`,01)) |>
    rename(value = `Valor FOB (US$)`) |>
    rename(volume = `Quilograma Líquido`) |>
    rename(country = `Países`) |>
    select(c(date, country, value, volume)) |>    
  filter(country != 'Brasil') |> filter(volume > 1) 
# existem linhas com o Brasil, o que não faz sentido; 
# também são excluídos da base países para os quais o Brasil tenha exportado menos que 1KG.L



tbl_render(ts_tbl_m,"")

```
Série dos dados mensais de volume e valor de vinho exportado pelo Brasil - janeiro/2000 a dezembro/2022.
:::
<!--- end table --->

Ocorre que, conforme citado na [introdução](), os valores de exportação estão expressos em dólares correntes, isto é, são valores nominais.

Para a correta comparação de valores no tempo é necessário considerar o efeito da inflação e, consequentemente realizar o reajuste dos valores de modo que possam todos estar na mesma data-base. 

Na próxima seção detalhamos o procedimento adotado.

:::
<!--- end section --->
## Ajuste das séries para considerar os efeitos da inflação

::: {style="text-align: justify"}
Os dados monetários da série estão em frequência mensal e anual.

Como a ideia é realizar a análise dos dados ao longo do tempo, é importante considerar os efeitos da inflação pois, US\$ 1,00 em 2000 é diferente de US\$ 1,00 em 2022. Ou seja, caso não se faça a correção pela inflação, haverá imprecisão nos valores apresentados.

Ademais, ao se relacionar os valores de exportação com dados socioeconômicos, é importante que os dados estejam na mesma data de referência. 

Neste sentido, assumimos que os valores da série são nominais, isto é, os valores são relativos ao ano corrente.
Então todos eles foram reajustados para o ano de 2022 (série anual, considerando valor acumulado até 31/12/2022) e para dezembro de 2022 (considerando o primeiro de cada mês).

Para realizarmos o ajuste foi extraída a série de [CPI](https://www.bls.gov/cpi/) (*Consumer Price Index*) anual, que é o índice de inflação dos Estados Unidos.


```{r}
#| echo: false
#| message: false
#| warning: false
#| label: read-cpi

# anual
cpi_us_y <-  readr::read_delim(
        "../../data/cpi_brazil_us/cpi_series.csv",
        delim = ";",
        escape_double = FALSE,
        trim_ws = TRUE,
        show_col_types = F
    ) |> arrange(desc(year)) |> 
  mutate(correction = (1./(cpi/cpi[1]))) |> 
  mutate(date = lubridate::make_date(year, 12, 31)) |> 
  select(c(date, cpi, correction))

# mensal
cpi_us_m <-  readr::read_delim(
        "../../data/cpi_brazil_us/CPI_monthly.csv",
        delim = ",",
        escape_double = FALSE,
        trim_ws = TRUE,
        show_col_types = F
    ) |> rename('cpi' = 'Consumer Price Index') |> arrange(desc(Year)) |> 
  filter(Year > 1999 & Year < 2023) |> 
  mutate(correction = (1./( cpi/cpi[1]))) |> 
  mutate(date = lubridate::ymd(paste0(Year,paste0(Period, '01')))) |> 
  select(c(date, cpi, correction))

# corrige os valores anuais
data_exp_yc <- ts_tbl_y |> 
  dplyr::inner_join(cpi_us_y, by = 'date')  |> 
  mutate(value = value * correction) |> 
  select(-c('cpi','correction'))


# corrige os valores mensais
data_exp_mc <- ts_tbl_m |> 
  dplyr::inner_join(cpi_us_m, by = 'date')  |> 
  mutate(value = value * correction) |> 
  select(-c('cpi','correction'))

```

O gráfico @fig-cpi demonstra que entre 2000 e 2022 houve um **crescimento acumulado do índice na ordem de aproximadamente 52%**.

```{r}
#| echo: false
#| warning: false
#| fig-cap: 'Índice CPI (anual) entre os anos de 2000 e 2022'
#| label: fig-cpi

cpi_us_y |> timetk::plot_time_series(.date_var = date, 
                                     .value = cpi,
                                     .title = 'Índice CPI (anual) entre os anos de 2000 e 2022',
                                     .x_lab = 'Ano',
                                     .y_lab = 'Índice',
                                     .smooth = 'False')
```

As tabelas @tbl-data_yc e @tbl-data_mc mostram os dados já reajustados. 

::: {#tbl-data_yc}

```{r}
#| echo: false
#| warning: false
#| label: tbl-data_yc

tbl_render(data_exp_yc,"") 

```
Dados anuais com valor exportado em US\$ de 2022.
:::

::: {#tbl-data_mc}
```{r}
#| echo: false
#| warning: false
#| label: tbl-data_mc

tbl_render(data_exp_mc,"")
```
Dados mensais com valor exportado em US\$ de dez/2022.
:::

Ao analisarmos as tabelas anteriores, percebemos facilmente que existe uma diferença não desprezível entre os valores nominais e o valores reajustados. Por exemplo, o valor exportado pelo Paraguai no ano 2000 em termos nominais soma o montante de US\$2,394,569.00, enquanto que a preços de 2022, o valor equivalente totaliza US\$4,069,585.31.

Tendo os valores corrigidos para os preços de 2022, doravante, quando nos referirmos ao valor total exportado, **estaremos tratando do valor em US\$ reajustado**.
:::

## Definição de indicador de desempenho

Para facilitar a análise comparativa, tanto no tempo como entre país, a criação de um indicador de desempenho pode facilitar a tarefa. Propomos a adoção de um indicador (kpi) do tipo $${Valor}\over{Quilograma\,Líquido}$$

O indicador deve traduzir quanto cada país paga por quilograma líquido de vinho brasileiro, transformando assim duas dimensões de análise em uma. Quanto maior o indicador, maior o retorno da exportação daquele determinado país parao Brasil. 

Por outro lado, o indicador deve ser visto com cautela, uma vez que determinados países na base compraram muito menos que outros ou ainda muito mais que outros. Ou seja, a existência de _outliers_ pode prejudicar a análise.

As tabelas @tbl-data_yc_kpi e @tbl-data_mc_kpi mostram os dados agora incluindo o indicador calculado.

```{r}
#| echo: false
#| warning: false

# cálculo do indicador para a série anual
data_exp_yc <- data_exp_yc |> mutate(kpi = round(value/volume,2))

# cálculo do indicador para a série anual
data_exp_mc <- data_exp_mc |> mutate(kpi = round(value/volume,2))


```

::: {#tbl-data_yc_kpi}
```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-data_yc_kpi
#| tbl-cap: ""

tbl_render(data_exp_yc, "")

```
Dados em frequência anual com a inclusão do indicador. 
:::


::: {#tbl-data_mc_kpi}
```{r}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-data_mc_kpi
tbl_render(data_exp_mc,"") 

```
Dados em frequência mensal com a inclusão do indicador.
:::


## Análise transversal dos dados - agregação por país

::: {style="text-align: justify"}
A agregação dos dados por país permite a avaliação de desempenho das exportações para cada destino, o que levará à identificação inclusive de eventuais _outliers_, os quais poderão ser eventualmente excluídos da base de dados. Neste caso, podemos tranquilamente utilizar a base de dados anuais.


:::{#tbl-data_yc_by_country_sum}
```{r}
#| echo: false
#| warning: false
#| label: tbl-data_yc_by_country_sum
#| tbl-cap: __
data_exp_yc_by_country_sum <- data_exp_yc |> 
  group_by(country) |> 
  summarise(sum_val = sum(value), sum_vol = sum(volume)) |> 
  arrange(desc(sum_val)) |> 
  mutate(perc_val = sum_val/sum(sum_val)*100, 
         perc_vol = sum_vol/sum(sum_vol)*100,
         kpi = sum_val/sum_vol)


cnames <- c('País', 'Valor Total (US$)', 
            'Volume Total (Kg.L)', 'Valor Total (%)', 
            'Volume Total (%)', 'KPI')

DT::datatable(data_exp_yc_by_country_sum, filter = "bottom", 
                          colnames =cnames,
                          caption = "", 
                          extensions = 'Buttons', 
                          options = list(
                              dom = 'Bfrtip',
                              buttons = c('copy','excel', 'csv', 'pdf'))
  ) |>  DT::formatRound(columns = c('sum_vol', 'perc_val', 'perc_vol', 'kpi') , 
                        mark = ".",dec.mark = ",") |> 
  DT::formatCurrency(columns = 'sum_val')
```
Exportações agregadas por país em valores totais.
:::


```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-nrow: 2
#| label: fig-treemap_agg_by_country_val
#| fig-cap: 
#| - "Valor exportado exportado agregado por país."
#| - "Volume exportado agregado por país."

library(treemapify)

ggplot(data_exp_yc_by_country_sum, aes(area = sum_val/10^6, fill = sum_val/10^6, label = country))+
  geom_treemap() +  geom_treemap_text(colour = "white",
                    place = "centre",
                    size = 15) + ggtitle("Valor exportado em milhões US$.")

ggplot(data_exp_yc_by_country_sum, aes(area = sum_vol/10^6, fill = sum_vol/10^6, label = country))+
  geom_treemap() +  geom_treemap_text(colour = "white",
                    place = "centre",
                    size = 15) + ggtitle("Volume exportado em milhões de litros.")


# gridExtra::grid.arrange(treemap1, treemap2, ncol = 1, nrow = 2)
```

Se observarmos com cuidado, especialmente a coluna KPI da @tbl-data_yc_by_country_sum possui _outliers_. Então podemos tentar removê-los para evitar eventual "contaminação" da análise.

:::
## Remoção de outliers

::: {style="text-align: justify"}

O gráfico da @fig-boxplot_kpi_by_country_sum mostra que o KPI é bastante afetado por eles. Então poder utilizar a coluna KPI como parâmetro para remoção.

```{r}
#| echo: false
#| warning: false
#| fig-cap: 'Boxplot do KPI calculado para os dados totalizados por país.'
#| label: fig-boxplot_kpi_by_country_sum 

plotly::plot_ly( y = data_exp_yc_by_country_sum$kpi, type = "box", name = 'KPI') |> 
  layout(xaxis = list(title='indicador'), yaxis = list(title = 'KPI'))

```
:::{#tbl-data_yc_by_country_sum_noout}

```{r}
#| echo: false
#| warning: false
#| label: tbl-data_yc_by_country_sum_noout
data <- data_exp_yc_by_country_sum

quartiles <- quantile(data$kpi, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(data$kpi)
 
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR 
 
data_no_outlier <- subset(data, data$kpi > Lower & data$kpi < Upper)

data_no_outlier <- data_no_outlier |> mutate(perc_val = sum_val/sum(sum_val)*100, 
                          perc_vol = sum_vol/sum(sum_vol)*100)

DT::datatable(data_no_outlier, filter = "bottom", 
                          colnames =cnames,
                          caption = "", 
                          extensions = 'Buttons', 
                          options = list(
                              dom = 'Bfrtip',
                              buttons = c('copy','excel', 'csv', 'pdf'))
  ) |>  DT::formatRound(columns = c('sum_vol', 'perc_val', 'perc_vol', 'kpi') , 
                        mark = ".",dec.mark = ",") |> 
  DT::formatCurrency(columns = 'sum_val')

```
Dados após a remoção de _outliers_
:::

```{r}
#| echo: false
#| warning: false  

#lista de outliers
list_outliers <- toString(data_exp_yc_by_country_sum$country[-which(data_exp_yc_by_country_sum$country %in% data_no_outlier$country)])

```

Após a remoção dos outliers, restaram 108 observações no conjunto de dados (@tbl-data_yc_by_country_sum_noout). Com base no KPI, os seguintes países foram excluídos da base: Eslováquia, Áustria, Hungria, Letônia, Bulgária, Croácia, Bangladesh, Mauritânia.

```{r}
#| echo: false
#| warning: false

data_exp_yc_by_country_sum_no_out <- data_no_outlier

max_val <- round(max(data_exp_yc_by_country_sum_no_out$sum_val/10^6),0)
max_vol <- round(max(data_exp_yc_by_country_sum_no_out$sum_vol/10^6),0)

max_val_perc <- round(max(data_exp_yc_by_country_sum_no_out$perc_val),0)
max_vol_perc <- round(max(data_exp_yc_by_country_sum_no_out$perc_vol),0)
```


A @tbl-data_yc_by_country_sum_noout, @fig-treemap_agg_by_country_val-1 e @fig-treemap_agg_by_country_val-2 mostram que Paraguai e Rússia foram os principais destinos das exportações de vinhos tanto em termos de valor exportado, como em termos de volume exportado entre 2000 e 2022. O valor exportado para o Paraguai foi de 58 milhões de US\$, equivalente a corresponde a aproximadamente 37% do valor total exportado. Por outro lado, a Rússia é a líder em termos de volume exportado com aproximadamente 60 milhões de Kg.L e 43%. O indicador de US\$/Kg.L mostra que o Paraguai é um destino melhor que a Rússia, pois 1,18 > 0,44. 

## Os 15 maiores importadores de vinhos do Brasil

```{r}
#| echo: false
#| warning: false
#| label: 'fig-exp-yc-by-country-sum'
#| layout-nrow: 2
#| fig-cap: 
#|   - 'Top 15 maiores importadores de vinhos do Brasil em milhões de US$ totais'
#|   - 'Top 15 maiores importadores de vinhos do Brasil em milhões de Kg.L totais'  

ggplotly(data_exp_yc_by_country_sum_no_out |> 
           head(15) |> 
           ggplot(aes(x = country, y = sum_val/10^6, colour=country, fill=country)) + 
           geom_bar(stat="identity")+
            #scale_fill_brewer(palette = "Set3") +           
            theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
            labs(
              title = "Top 15 maiores importadores de vinhos do Brasil em valor total (2000-2022)",
              caption = "Valor Total em milhões de US$",
              x = "País",
              y = "Valor Total em milões de US$",
              
            )
         
         
         ) 


ggplotly(data_exp_yc_by_country_sum_no_out |> 
           head(15) |> 
           ggplot(aes(x = country, y = sum_vol/10^6, colour=country, fill=country)) + 
           geom_bar(stat="identity")+
            #scale_fill_brewer(palette = "Set3") +           
            theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
            labs(
              title = "Top 15 maiores importadores de vinhos do Brasil em volume total (2000-2022)",
              caption = "Valor Total em milhões de Kg.L",
              x = "País",
              y = "Valor Total em milões de Kg.L",
              
            )
         
         
         ) 



```


:::{#tbl-data-yc-by-country}
```{r}
#| echo: false
#| warning: false
#| label: tbl-data-yc-by-country

# cria o datafram excluindo os outliers identificados na etapa anterior
data_exp_yc_by_country <-  data_exp_yc |> filter(data_exp_yc$country %notin% lapply(as.list(strsplit(list_outliers, ",")), FUN = str_squish)[[1]]) |> 
  group_by(country) |> 
  summarise(mean_val =  mean(value), max_val = max(value), min_val = min(value), median_val = median(value),
            mean_vol =  mean(volume), max_vol = max(volume), min_vol = min(volume), median_vol = median(volume),
            mean_kpi = mean(kpi),max_kpi = max(kpi), min_kpi = min(kpi), median_kpi = median(kpi)
            ) |> arrange(desc(mean_val))

cnames <- c('País', 'Valor Médio (US$)', 'Valor Máximo (US$)', 'Valor Mínimo (US$)', 'Valor Mediano (US$)',
           'Volume Médio (Kg.L)',  'Volume Máximo (Kg.L)', 'Volume Mínimo (Kg.L)', 'Volume Mediano (Kg.L)',
           'KPI Médio',  'KPI Máximo', 'KPI Mínimo', 'KPI Mediano')

DT::datatable(data_exp_yc_by_country, filter = "bottom", 
                          colnames =cnames ,
                          caption = "", 
                          extensions = 'Buttons', 
                          options = list(
                              dom = 'Bfrtip',
                              buttons = c('copy','excel', 'csv', 'pdf'))
  ) |>  DT::formatRound(columns = colnames(data_exp_yc_by_country)[2:length(data_exp_yc_by_country)], 
                        mark=".",dec.mark = ",") |> 
  DT::formatCurrency(columns = colnames(data_exp_yc_by_country)[2:5])


```

Dados agregados por país (análise transversal): medidas estatísticas (média, máximo, mínimo e mediana) para Volume (Kg.L), Valor (US$) e KPI.
:::

```{r}
#| echo: false
#| warning: false
#| layout-nrow: 2
#| fig-cap: 
#| - "Top 15 maiores importadores de vinhos do Brasil - valor em milhões de US$"
#| - "Top 15 maiores importadores de vinhos do Brasil - volume em milhões de Kg.L"
#| label: fig-data_yc_mean_by_country

ggplotly(data_exp_yc_by_country |> 
           head(15) |> 
           ggplot(aes(x = country, y = mean_val/10^6, colour=country, fill=country)) + 
           geom_bar(stat="identity")+
            #scale_fill_brewer(palette = "Set3") +           
            theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
            labs(
              title = "Top 15 maiores importadores de vinhos do Brasil - valor(2000-2022)",
              caption = "Valor médio em milhões de US$",
              x = "País",
              y = "milhões de US$",
              
            )
         # 
         
         ) 

ggplotly(data_exp_yc_by_country |> 
           head(15) |> 
           ggplot(aes(x = country, y = mean_vol/10^6, colour=country, fill=country)) + 
           geom_bar(stat="identity")+
            #scale_fill_brewer(palette = "Set3") +           
            theme_minimal() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
            labs(
              title = "Top 15 maiores importadores de vinhos do Brasil - volume (2000-2022)",
              caption = "Volume médio em milhões de Kg.L",
              x = "País",
              y = "milhões de Kg.L",
              
            )
         # 
         
         ) 


```




```{r}
#| echo: false
#| warning: false
#| layout-ncol: 3
#| fig-cap: 'Boxplot das medidas estatísticas (média, máximo, mínimo, mediana) para os dados anuais agregados por país'
#| fig-subcap: 
#|   - 'log do valor exportado em US\$'
#|   - 'log do volume exportado em Kg.L'
#|   - 'indicador'
#| label: fig-boxplot-stats_by_country

plotly::plot_ly(y=~log(data_exp_yc_by_country$mean_val), type = "box", name ='Média') |> 
  plotly::add_trace(y=~log(data_exp_yc_by_country$max_val), name = 'Máximo') |> 
  plotly::add_trace(y=~log(data_exp_yc_by_country$min_val), name = 'Mínimo') |> 
  plotly::add_trace(y=~log(data_exp_yc_by_country$median_val), name = 'Mediana')  |> 
  layout(xaxis = list(title='medida'), yaxis = list(title = 'log(valor)'))


plotly::plot_ly(y=~log(data_exp_yc_by_country$mean_vol), type = "box", name ='Média') |> 
  plotly::add_trace(y=~log(data_exp_yc_by_country$max_vol), name ='Máximo') |> 
  plotly::add_trace(y=~log(data_exp_yc_by_country$min_vol), name='Mínimo') |> 
  plotly::add_trace(y=~log(data_exp_yc_by_country$median_vol), name = 'Mediana')  |> 
  layout(xaxis = list(title='medida'), yaxis = list(title = 'log(volume)'))

plotly::plot_ly(y=~(data_exp_yc_by_country$mean_kpi), type = "box", name = 'Média') |> 
  plotly::add_trace(y=~(data_exp_yc_by_country$max_kpi), name = 'Máximo') |> 
  plotly::add_trace(y=~(data_exp_yc_by_country$min_kpi), name = 'Mínimo') |> 
  plotly::add_trace(y=~(data_exp_yc_by_country$median_kpi), name = 'Mediana') |> 
  layout(xaxis = list(title='medida'), yaxis = list(title = 'kpi'))


```

Como podemos perceber na @fig-boxplot-stats_by_country, ainda existem muitos _outliers_ no conjunto de dados, especialmente quando olhamos os valores máximos do KPI. Na verdade, podemos inferir que tal medida, conforme ressaltado anteriormente, deve ser avaliada com bastante cautela.


```{r}
#| echo: false
#| warning: false

list_countries <- toString(head(data_exp_yc_by_country_sum_no_out$country, 15)[-which(head(data_exp_yc_by_country_sum_no_out$country, 15) %in% head(data_exp_yc_by_country$country, 15))])



```

A comparação entre os dados da @fig-data_yc_mean_by_country e da @fig-exp-yc-by-country-sum' demonstra que existem apenas três países que não figuram no "top 15" países em ambos os casos: {list_countries}.

:::

## Análise longitudinal dos dados - agregação por unidade de tempo

::: {style="text-align: justify"}

Dando continuidade à análise dos dados,  uma análise longitudinal, ou seja, considerando os dados agregados por ano pode ser interessante. Desta forma é possível obter *insights* sobre o mercado de um modo geral e pensando em tendências de curto, médio e longo-prazo.

Convém lembrar que análises de sazonalidade e outros efeitos envolvendo principalmente o curto-prazo demandam que a série esteja preferencialmente em base mensal, o que será apresentado na **próxima seção**.

::: {#tbl-data_exp_yc_by_date}
```{r transform_data}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-ts_total
#| tbl-cap: ""

data_exp_yc_by_date <- data_exp_yc  |> group_by(date) |> 
            summarise(sum_val = sum(value), 
                      sum_vol = sum(volume),
                      mean_val = mean(value),
                      mean_vol = mean(volume),
                      mean_kpi = mean(kpi),
                      ) |> 
            arrange(desc(date))

cnames <- c('Data', 'Valor Total (US$)', 
            'Volume Total (Kg.L)', 'Valor Médio (US$)', 
            'Volume Médio (Kg.L)', 'KPI Médio')

DT::datatable(data_exp_yc_by_date, filter = "bottom", 
                          colnames =cnames,
                          caption = "", 
                          extensions = 'Buttons', 
                          options = list(
                              dom = 'Bfrtip',
                              buttons = c('copy','excel', 'csv', 'pdf'))
  ) |>  DT::formatRound(columns = c('sum_vol', 'mean_vol', 'mean_kpi') , 
                        mark = ".",dec.mark = ",") |> 
  DT::formatCurrency(columns = c('sum_val', 'mean_val' )) |> 
  DT::formatDate(columns = c('date'), method = "toLocaleDateString" )
```

Série dos dados agregados por ano (corte longitudinal).

:::

```{r}
#| echo: false
#| warning: false 

# datas em que ocorreram os valores máximos para a tabela anterior
important_dates <- bind_rows(data_exp_yc_by_date |> 
            filter(data_exp_yc_by_date$sum_val == max(data_exp_yc_by_date$sum_val)),
data_exp_yc_by_date |> filter(data_exp_yc_by_date$sum_vol == max(data_exp_yc_by_date$sum_vol)),
data_exp_yc_by_date |> filter(data_exp_yc_by_date$mean_val == max(data_exp_yc_by_date$mean_val)),
data_exp_yc_by_date |> filter(data_exp_yc_by_date$mean_vol == max(data_exp_yc_by_date$mean_vol)),
data_exp_yc_by_date |> filter(data_exp_yc_by_date$mean_kpi == max(data_exp_yc_by_date$mean_kpi))) 

```

A @tbl-data_exp_yc_by_date nos permite verificar que os anos em que ocorreram os máximos para cada uma das colunas. A @tbl-max facilita a visualização.    

| Medida              | Ano    | 
|:------------------- |--------:|
| Valor Total (US\$)   | 2014   |
| Volume Total (Kg.L) | 2009   |
| Valor Médio (US$)   | 2000   |
| Volume Médio (Kg.L) | 2009   |
| KPI Médio           | 2012   | 

: Valores máximos para as medidas e os respectivos anos em que ocorreram {#tbl-max} 

Interessante notarmos que os anos entre 2009 e 2013 parecem ter sido aqueles mais favoráveis para as exportações de vinho considerando o conjunto dos países. 

Nas próximas seções nos aprofundaremos na evolução das exportações no tempo.

:::

### Visualização das séries temporais

::: {style="text-align: justify"}

Após a correção da série de valor exportado, é possível iniciar a análise das séries temporais. As @fig-ts_total_value-1 e @fig-ts_total_value-2 mostram as séries de valor exportado por ano (médio e total) entre 2000 e 2022, incluindo a série suavizada.

Notamos a existência de **dois picos**, um em **2009** e outro em **2013**, sendo **o último maior que o primeiro** - como apontamos na seção anterior.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-ts_total_value
#| fig-cap: 
#| - 'Valor Total exportado (anual) em US$'
#| - 'Valor Médio exportado (anual) em US$'

data_exp_yc_by_date |> 
    plot_time_series(date, sum_val, .smooth = T, 
                     .interactive = T, 
                     .smooth_span = 0.3,
                     .smooth_alpha = 0.8,
                     .title = 'Valor Total exportado (anual) em US$',
                     .plotly_slider = T)

data_exp_yc_by_date |> 
    plot_time_series(date, mean_val, .smooth = T, 
                     .interactive = T, 
                     .smooth_span = 0.3,
                     .smooth_alpha = 0.8,
                     .line_color = "red",
                     .title = 'Valor Médio exportado (anual) em US$',
                     .plotly_slider = T)



```

Em seguida, podemos visualizar a série de volume total exportado em base anual, considerando 1L=1Kg (@fig-ts_total_volume-1
e @fig-ts_total_volume-2).

Os **dois picos** existentes na série anterior também foram verficados em **2009** e em **2013**.
Contudo, ao contrário do verificado na @fig-ts_total_value-1 e @fig-ts_total_value-2, **o de 2009 é maior que o de 2013**.

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-ts_total_volume
#| fig-cap: 
#| - 'Volume Total exportado (anual) em L'
#| - 'Volume Médio exportado (anual) em L'


data_exp_yc_by_date |> 
    plot_time_series(date, sum_vol, .smooth = T, 
                     .interactive = T, 
                     .smooth_span = 0.3,
                     .smooth_alpha = 0.8,
                     .title = 'Volume Total exportado (anual) em L',
                     .plotly_slider = T)

data_exp_yc_by_date |> 
    plot_time_series(date, mean_vol, .smooth = T, 
                     .interactive = T, 
                     .smooth_alpha = 0.8,
                     .smooth_span = 0.3,
                     .line_color = "red",
                     .title = 'Volume Médio exportado (anual) em L',
                     .plotly_slider = T)

```

Convém também destacar o fato de que, ao comparar as séries suavizadas, percebemos que a série de valor total exportado possui uma leve tendência de aumento ao longo do tempo, por outro lado, a série de volume total exportado parece estar oscilando em torno de uma média.

Como a inspeção visual das séries é imprecisa, faz-se necessária a utilização de técnicas específicas, como será mostrado a seguir.
:::


